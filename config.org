#+TITLE: My Emacs config
#+AUTHOR: Subeet Kumar Dutta
#+STARTUP: overview

* TODO
1. Better Lsp support.
   Keybinding for basic lsp things.

* Goal
  The current goal is to have a complete setup of emacs that works with the java development.

* Setup package.el
  Add the repos and install use-package
  #+begin_src emacs-lisp
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
		 ("org" . "https://orgmode.org/elpa/")
		 ("elpa" . "https://elpa.gnu.org/packages/")))
    (add-to-list 'package-archives
		 '("melpa-stable" . "https://stable.melpa.org/packages/") t)

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; install use-package
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)

    (setq use-package-always-ensure t)
  #+end_src
* Evil mode
  Best mode known to man
** Base
   Base setup for the evil mode
   #+begin_src emacs-lisp
     ;; evil mode
     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       :config
       (evil-mode 1))
   #+end_src
** additional key bindings
   some additional key bindings for evil mode
   #+begin_src emacs-lisp
     ;; additional evil keybindings for better navigation
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))

     ;; for org mode
     (use-package evil-org
       :after org
       :hook (org-mode . (lambda () evil-org-mode))
       :config
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src
** Better key mappings
   Better way to map the keys
   #+begin_src emacs-lisp
     (use-package general)

     ;; set global leader
     (defconst my-leader "SPC")

     (general-create-definer vim-leader-key
			     :keymaps '(normal visual insert emacs)
			     :prefix my-leader
			     :non-normal-prefix "C-SPC")
   #+end_src
* Tree sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)

  (global-tree-sitter-mode)
#+end_src
* LSP
** Company mode
   #+begin_src emacs-lisp
     (use-package company
       :init
       (setq company-minimun-prefix 1
	     company-idle-delay 0))

     (global-company-mode 1)
     ;; for other modes
     ;; (add-hook 'org-mode-hook #'company-mode)
   #+end_src
** FlyCheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

#+RESULTS:
** Lsp-Ui
#+begin_src emacs-lisp
  (use-package lsp-ui)
#+end_src

#+RESULTS:

** LSP base
   very basic setup for lsp
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :hook (c++-mode . lsp-deferred)
       :bind
       (:map lsp-mode-map
	 ("M-RET" . lsp-execute-code-action))
       :config
       (lsp-enable-which-key-integration t)

       ;; turn off the autoformatting
       (setq lsp-enable-on-type-formatting 1)

       ;; setting the default completion provider for lsp
       (setq lsp-completion-provider :capf)

       ;; performance tweaks
       (setq gc-cons-threshold 1000000000)
       (setq read-process-output-max (* 1024 1024))
       (setq lsp-idle-delay 0.500))
   #+end_src
** Language specific.
   Some language specific configuration.
*** Java
    Set up lsp for java (in my home setup will be using the java 11 but in the work will use java 8)
    #+begin_src emacs-lisp
      ;; setup jdt
      (use-package lsp-java
	;;:init
	;;(setq lsp-java-java-path "/usr/lib/jvm/java-11-openjdk-amd64/bin/java")
	:config
	;; for different runtimes
	;; (setq lsp-java-configuration-runtimes '[(:name "JavaSE-1.8" :path "/usr/lib/jvm/java-1.8.0-openjdk-amd64" :default t)])
	(add-hook 'java-mode-hook #'lsp))
      
      ;; for code action (have to use helm i think)
    #+end_src
*** Cpp
#+begin_src emacs-lisp
 
#+end_src

* Snippets
  using yasnippet for snippet functionality
  #+begin_src emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
  #+end_src
* ORG
  some improvements for org mode experience
** Viusals
   Use org-bullets and change the last three dots.
   #+begin_src emacs-lisp
     (setq org-ellipsis "â¤µ")

     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src
** For other language support
   for java support in the code block
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((java . t)))
   #+end_src
** Org Roam
   For managing org files
   #+begin_src emacs-lisp
     ;; (use-package org-roam
     ;;   :init
     ;;   (setq org-roam-v2-ack t)
     ;;   :custom
     ;;   (org-roam-directory (file-truename "~/coding/RoamNotes"))
     ;;   :bind (("C-c n l" . org-roam-buffer-toggle)
     ;; 	 ("C-c n f" . org-roam-node-find)
     ;; 	 ("C-c n g" . org-roam-graph)
     ;; 	 ("C-c n i" . org-roam-node-insert)
     ;; 	 ("C-c n c" . org-roam-capture)
     ;; 	 ;; Dailies
     ;; 	 ("C-c n j" . org-roam-dailies-capture-today))
     ;;  :config
     ;;  (org-roam-setup))
   #+end_src
** Org mode with evil
   additional evil mode keybindings for the org mode.
   [[https://github.com/Somelauw/evil-org-mode][package description]]
   #+begin_src emacs-lisp
     (use-package evil-org
       :after org
       :hook (org-mode . (lambda () evil-org-mode))
       :config
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src
* Visuals
  Some visual improvements, only for visuals
** Turn off useless mode
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)

     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)

     (menu-bar-mode -1)

     (setq visible-bell 1)
   #+end_src
** Setup backup config
   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
       backup-by-copying t    ; Don't delink hardlinks
       version-control t      ; Use version numbers on backups
       delete-old-versions t  ; Automatically delete excess backups
       kept-new-versions 20   ; how many of the newest versions to keep
       kept-old-versions 5    ; and how many of the old
       )

     (setq auto-save-file-name-transforms
       `((".*" "~/.emacs.d/backup/" t)))

     (setq backup-directory-alist '(("." . "~/MyEmacsBackups")))
   #+end_src
** Font
   set font
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "Menlo" :height 160)
   #+end_src

   #+RESULTS:

** Which key
   Show keybindings
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))
   #+end_src
** Icons
   Using all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons)
   #+end_src
** Themes
   Using doom themes
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-one t)

       ;; Enable flashy visual alert
       (doom-themes-visual-bell-config)
       (doom-themes-org-config))


     ;; for modeline
     (use-package doom-modeline
       :init
       (doom-modeline-mode 1))
   #+end_src
** File Tree
   Using emacs neotree
   #+begin_src emacs-lisp
     (use-package neotree
       :config
       ;; for doom themes
       (doom-themes-neotree-config))
   #+end_src
** Line Number and cursor line
   Enable global line number and cursor line for satisfaction nothing else.
   #+begin_src emacs-lisp
     (setq line-move-visual t)

     (global-hl-line-mode 1)
     (set-face-attribute hl-line-face nil :underline nil)

     (column-number-mode)
     (global-display-line-numbers-mode t)

     ;; disable for some mode
     (dolist (mode '(org-mode-hook
		     term-mode-hook
		     vterm-mode-hook
		     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     (electric-pair-mode t)
   #+end_src

   #+RESULTS:
   : t
** Centaur tabs
   For more visual appearance
   #+begin_src emacs-lisp
     (use-package centaur-tabs
       :demand
       :init
       (setq centaur-tabs-style "bar")
       (setq centaur-tabs-height 32)
       (setq centaur-tabs-set-icons t)
       (setq centaur-tabs-set-bar 'over)
       :config
       (centaur-tabs-mode t)
       :bind
       ("C-<left>" . centaur-tabs-backward)
       ("C-<right>" . centaur-tabs-forward))
   #+end_src

   #+RESULTS:
   : centaur-tabs-forward
** Line Wrap mode
   For better reading, enabling the line wrap mode.
   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src

   #+RESULTS:
   : t

* Keybindings
  some keybindings
  #+begin_src emacs-lisp
    (vim-leader-key

      ;; toggle
      "t" '(:ignore t :which-key "Toggles")
      "tt" '(counsel-load-theme :which-key "Theme")
      "tc" '(comment-line :which-key "comment line")

      "tr" '(:ignore t :which-key "Toggle for region")
      "trc" '(comment-or-uncomment-region :which-key "comment Region")

      "tf" '(:ignore t :which-key "Toggle for neotree")
      "tff" '(neotree-toggle :which-key "Toggle neotree")


      ;; window keybinds
      "w" '(:ignore t :which-key "Window")
      "wk" '(:ignore t :which-key "Kill Window")
      ;; "wkk" '(kill-buffer-and-window :which-key "Kill current window")

      ;; Buffer Keybindings
      "b" '(:ignore t :which-key "Buffers")

      "bb" '(counsel-switch-buffer :which-key "Buffers")

      ;; kill buffer
      "bk" '(:ignore t :which-key "Kill Buffer")
      "bkk" '(kill-current-buffer :which-key "Current")
      "bkb" '(kill-buffer :which-key "Other")

      ;; File related stuff
      "f" '(:ignore t :which-key "Files")
      "ff" '(counsel-find-file :which-key "Find files")

      ;; Project Commands
      "p" '(:ignore t :which-key "Project")
      "pp" '(counsel-projectile-switch-project :which-key "Switch Project")
      "pf" '(counsel-projectile-find-file :which-key "Find File")
      ;; "pg" (counsel-projectile-rg :which-key "Search String")

      ;; Git commands
      "g" '(:ignore t :which-key "Git")
      "gs" '(magit-status :which-key "Status")

      ;; LSP Keybindings (WIP)
      "l" '(:ignore t :which-key "LSP")
      "lc" '(:ignore t :which-key "Code")
      "lca" '(helm-lsp-code-actions :which-key "Code Actions")
      "lff" '(lsp-format-buffer :which-key "Format file"))
  #+end_src
* Searcher
  File searcher, search in buffer and other implementation
** Ivy, swiper and counsel
   #+begin_src emacs-lisp
     (use-package ivy
       :diminish ivy
       :config
       (ivy-mode)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (global-set-key (kbd "C-s") 'swiper)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file))

     ;; for better visual for ivy
     (use-package ivy-rich
       :after ivy
       :init
       (ivy-rich-mode 1)
       (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

     (use-package counsel
	 :diminish
	 :after ivy)

     (use-package swiper
       :after ivy)
   #+end_src
** Project
   Using projectile for the same in the projects
   #+begin_src emacs-lisp
     ;; projectile configuration
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom (projectile-completion-system 'ivy)
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/IdeaProjects")
	 (setq projectile-project-search-path '("~/IdeaProjects")))
       (setq projectile-switch-project-action #'projectile-dired))

     ;; better integration between counsel and projectile
     (use-package counsel-projectile
       :config (counsel-projectile-mode))
   #+end_src
* DAP mode
  Debugging adapter protocal
  TODO: have to add keymapings for it.
** Basic configuration
   #+begin_src emacs-lisp
     ;; enabling some of the featurues
     (setq dap-auto-configure-features '(sessions locals controls tooltip))
   #+end_src

